#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{matlab-prettifier}
\usepackage{lstautogobble}  % Fix relative indenting
\usepackage{color}          % Code coloring
% \usepackage{zi4}            % Nice font

\definecolor{bluekeywords}{rgb}{0.13, 0.13, 1}
\definecolor{greencomments}{rgb}{0, 0.5, 0}
\definecolor{redstrings}{rgb}{0.9, 0, 0}
\definecolor{graynumbers}{rgb}{0.5, 0.5, 0.5}

\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
%\definecolor{backcolour}{rgb}{0.95,0.95,0.92}
\definecolor{backcolour}{rgb}{1, 1, 1}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
soul
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "~/.lyx/templates/math_shorthand.lyx"

\end_inset


\end_layout

\begin_layout Title
Homework 2
\end_layout

\begin_layout Author
Ziheng Chen (zc5282)
\end_layout

\begin_layout Enumerate
Let 
\begin_inset Formula $A$
\end_inset

 be an 
\begin_inset Formula $n\times n$
\end_inset

 symmetric positive definite matrix.
 You know that 
\begin_inset Formula $\kappa\left(A\right)=100$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
Suppose that you run conjugate gradients (CG) to solve a linear system 
\begin_inset Formula $Ax=y$
\end_inset

.
 In the worst case scenario, how many iterations would you need in order
 to guarantee that the initial residual has been reduced by a factor of
 
\begin_inset Formula $\epsilon=10^{-5}$
\end_inset

?
\end_layout

\begin_layout Enumerate
Suppose that 
\begin_inset Formula $C$
\end_inset

 is a non-singular matrix and set 
\begin_inset Formula $B=C^{-∗}AC^{-1}$
\end_inset

.
 You know that 
\begin_inset Formula $\norm{I-B}\le1/2$
\end_inset

.
 If you use 
\begin_inset Formula $C$
\end_inset

 as a symmetric pre-conditioner, then how would your answer to question
 (a) change?
\end_layout

\begin_layout Standard

\shape italic
Notes
\shape default
: Equation (38.10) in Trefethen & Bau may be helpful.
 In part (b), a matrix such as 
\begin_inset Formula $C$
\end_inset

 can come from an approximate Cholesky factorization 
\begin_inset Formula $A\approx C^{*}C$
\end_inset

.
 In such a case, 
\begin_inset Formula $C$
\end_inset

 is upper triangular (and often very sparse), which means that applying
 either 
\begin_inset Formula $C^{-*}$
\end_inset

 or 
\begin_inset Formula $C^{-1}$
\end_inset

 to a vector is inexpensive.
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Enumerate
By CG error estimate, 
\begin_inset Formula $\norm{e_{n}}_{A}/\norm{e_{0}}_{A}\le2\left(\frac{\sqrt{\kappa}-1}{\sqrt{\kappa}+1}\right)^{n}=2\left(9/11\right)^{n}$
\end_inset

, thus we need at least 
\begin_inset Formula 
\[
\left\lfloor \log_{9/11}\left(\frac{1}{2}\epsilon\right)\right\rfloor +1=61
\]

\end_inset

iterations.
\end_layout

\begin_layout Enumerate
For any eigen pair 
\begin_inset Formula $\left(\lambda,v\right)$
\end_inset

 of 
\begin_inset Formula $B$
\end_inset

, let's assume 
\begin_inset Formula $\norm v=1$
\end_inset

 without loss of generality.
 Then, since 
\begin_inset Formula $\left(I-B\right)v=v-Bv=\left(1-\lambda\right)v$
\end_inset

, we have the norm estimate
\begin_inset Formula 
\[
\abs{1-\lambda}=\norm{\left(1-\lambda\right)v}=\norm{\left(I-B\right)v}\le\norm{I-B}\le1/2.
\]

\end_inset

Thus, the set of eigenvalues 
\begin_inset Formula $\lambda\left(B\right)\subseteq\left[1/2,3/2\right]$
\end_inset

, implying that 
\begin_inset Formula $\kappa\left(B\right)\le3$
\end_inset

.
 The number of iterations needed can be improved to
\begin_inset Formula 
\[
\left\lfloor \log_{\frac{\sqrt{3}-1}{\sqrt{3}+1}}\left(\frac{1}{2}\epsilon\right)\right\rfloor +1=10.
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Let 
\begin_inset Formula $A$
\end_inset

 be an 
\begin_inset Formula $m\times n$
\end_inset

 matrix, set 
\begin_inset Formula $p=\min\left(m,n\right)$
\end_inset

, and suppose that the singular value decomposition of 
\begin_inset Formula $A$
\end_inset

 takes the form 
\begin_inset Formula 
\[
\underset{m\times n}{A}=\underset{m\times p}{U}\underset{p\times p}{D}\underset{p\times n}{V^{*}}.
\]

\end_inset

Let 
\begin_inset Formula $k$
\end_inset

 be an integer such that 
\begin_inset Formula $1\le k<p$
\end_inset

 and let 
\begin_inset Formula $A_{k}$
\end_inset

 denote the truncation of the SVD to the first k terms: 
\begin_inset Formula 
\[
A_{k}=U\left(:,1:k\right)D\left(1:k,1:k\right)V\left(:,1:k\right)^{*}.
\]

\end_inset

Recall the definitions of the spectral and Frobenius norms: 
\begin_inset Formula 
\[
\norm A=\sup_{x\neq0}\frac{\norm{Ax}}{\norm x},\norm A_{F}=\left(\sum_{i=1}^{m}\sum_{j=1}^{n}\abs{A\left(i,j\right)}^{2}\right)^{1/2}.
\]

\end_inset

Prove directly from the definitions of the norms that 
\begin_inset Formula 
\[
\norm{A-A_{k}}=\sigma_{k+1}
\]

\end_inset

and that 
\begin_inset Formula 
\[
\norm{A-A_{k}}_{F}=\left(\sum_{j=k+1}^{p}\sigma_{j}^{2}\right)^{1/2}.
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $\left(u_{1},u_{2},\dots,u_{p}\right),\left(v_{1},v_{2},\dots,v_{p}\right)$
\end_inset

 denote the columns of 
\begin_inset Formula $U$
\end_inset

 and 
\begin_inset Formula $V$
\end_inset

, respectively.
\end_layout

\begin_layout Standard
For the spectral norm, notice that 
\begin_inset Formula 
\[
\left(A-A_{k}\right)v_{k+1}=\sum_{j=k+1}^{p}\left(\sigma_{j}u_{j}v_{j}^{*}\right)v_{k+1}=\sigma_{k+1}u_{k+1},
\]

\end_inset

thus 
\begin_inset Formula $\norm{A-A_{k}}\ge\norm{\left(A-A_{k}\right)v_{k+1}}=\sigma_{k+1}$
\end_inset

.
 On the other hand, for any vector 
\begin_inset Formula $x\in\bR^{n}$
\end_inset

, use the fact that 
\begin_inset Formula $\left\{ u_{i}\right\} $
\end_inset

 (or 
\begin_inset Formula $\left\{ v_{j}\right\} $
\end_inset

) are orthogonal and of unit length, we have
\begin_inset Formula 
\begin{align*}
\norm{\left(A-A_{k}\right)x} & =\norm{\sum_{j=k+1}^{p}\left(\sigma_{j}u_{j}v_{j}^{*}\right)x}\\
 & =\sqrt{\sum_{j=k+1}^{p}\sigma_{j}^{2}\abs{v_{j}^{*}x}^{2}}\\
 & \le\sigma_{k+1}\sqrt{\sum_{j=k+1}^{p}\norm{v_{j}\left(v_{j}^{*}x\right)}^{2}}\\
 & =\sigma_{k+1}\norm{\sum_{j=k+1}^{p}v_{j}\left(v_{j}^{*}x\right)}=\sigma_{k+1}\norm{P_{k+1:p}x}\le\sigma_{k+1}\norm x
\end{align*}

\end_inset

where 
\begin_inset Formula $P_{k+1:p}:=\sum_{j=k+1}^{p}v_{j}v_{j}^{*}$
\end_inset

 is the projection matrix on the subspace, so 
\begin_inset Formula $\norm{A-A_{k}}\le\sigma_{k+1}$
\end_inset

 and the equation is proved.
\end_layout

\begin_layout Standard
For the Frobenius norm, notice that 
\begin_inset Formula 
\[
\norm B_{F}^{2}=\sum_{i=1}^{m}\sum_{j=1}^{n}\abs{B_{ij}}^{2}=\sum_{i=1}^{m}\sum_{j=1}^{n}B_{ij}\left(B^{*}\right)_{ji}=\boldsymbol{tr}\left(BB^{*}\right),
\]

\end_inset

thus
\begin_inset Formula 
\begin{align*}
\norm{A-A_{k}}_{F}^{2} & =\boldsymbol{tr}\left(\left(A-A_{k}\right)\left(A-A_{k}\right)^{*}\right)\\
 & =\boldsymbol{tr}\left[\left(\sum_{j=k+1}^{p}\sigma_{j}u_{j}v_{j}^{*}\right)\left(\sum_{j=k+1}^{p}\sigma_{j}u_{j}v_{j}^{*}\right)^{*}\right]\\
 & =\boldsymbol{tr}\left[\left(\sum_{j=k+1}^{p}\sigma_{j}u_{j}v_{j}^{*}\right)\left(\sum_{l=k+1}^{p}\sigma_{l}v_{l}u_{l}^{*}\right)\right]\\
 & =\boldsymbol{tr}\left(\sum_{j=k+1}^{p}\sigma_{j}u_{j}v_{j}^{*}\sigma_{j}v_{j}u_{j}^{*}\right)\\
 & =\boldsymbol{tr}\left(\sum_{j=k+1}^{p}\sigma_{j}^{2}u_{j}u_{j}^{*}\right)=\sum_{j=k+1}^{p}\sigma_{j}^{2}.
\end{align*}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
On the course webpage, download the file 
\family typewriter
hw02p3.m
\family default
.
 This file contains an implementation of the column pivoted QR algorithm
 that computes a rank-
\begin_inset Formula $k$
\end_inset

 approximation to a matrix, for any given 
\begin_inset Formula $k$
\end_inset

.
 Your task is now to do two modifications to the code:
\end_layout

\begin_deeper
\begin_layout Enumerate
Starting with the function 
\family typewriter
CPQR_given_rank
\family default
 write a new function with calling sequence 
\family typewriter
[Q,R,ind] = CPQR_given_tolerance(A,acc)
\family default
 that takes as input an accuracy, and computes a low-rank approximation
 to a matrix that is accurate to precision “acc”.
\end_layout

\begin_layout Enumerate
Write a function with calling sequence 
\family typewriter
[U,D,V] = SVD_given_tolerance(A,acc)
\family default
 that computes a diagonal matrix 
\begin_inset Formula $D$
\end_inset

, and orthonormal matrices 
\begin_inset Formula $U$
\end_inset

 and 
\begin_inset Formula $V$
\end_inset

 such that 
\begin_inset Formula $\norm{A-UDV^{*}}\le\epsilon$
\end_inset

, where 
\begin_inset Formula $\epsilon$
\end_inset

 is the given tolerance.
 The idea is to use the function 
\family typewriter
CPQR_given_tolerance(A,acc) 
\family default
that you created in part (a).
 
\end_layout

\begin_layout Standard
Please hand in a print-out of the code that you created.
\end_layout

\begin_layout Standard

\shape italic
Extra problem
\shape default
: The file 
\family typewriter
hw02p3.m
\family default
 creates a plot that shows the accuracies of two low-rank approximations:
 The truncated SVD on the one hand, and the truncated QR on the other.
 Let me encourage you to play around with this a bit, try different matrices
 and see how the approximations errors compare.
 There is no need to hand anything in!
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "hw02p3.m"
lstparams "breaklines=true,captionpos=b,frame=tb,language=Matlab,firstline=5,lastline=83,backgroundcolor={\\color{backcolour}},commentstyle={\\color{codegreen}},keywordstyle={\\color{magenta}},numberstyle={\\tiny\\color{codegray}},stringstyle={\\color{codepurple}},basicstyle={\\ttfamily\\footnotesize},breakatwhitespace=false,breaklines=true,keepspaces=true,numbers=left,numbersep=5pt,showspaces=false,showstringspaces=false,showtabs=false,tabsize=2,caption={Approximated Factorization Functions and Testing Codes}"

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
In this example, we investigate the effect blocking has on execution time
 of matrix computations.
\end_layout

\begin_deeper
\begin_layout Enumerate
Suppose that we are given two 
\begin_inset Formula $n\times n$
\end_inset

 matrices 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 and that we seek to compute 
\begin_inset Formula $A=BC$
\end_inset

.
 We could do this in Matlab either by just typing 
\family typewriter
A = B*C
\family default
, or, we could write a loop
\end_layout

\begin_deeper
\begin_layout Verbatim

for i = 1 : n
\end_layout

\begin_layout Verbatim

	A(:,i) = B*C(:,i)
\end_layout

\begin_layout Verbatim

end for
\end_layout

\begin_layout Standard
The code 
\family typewriter
hw02p4.m
\family default
 illustrates the two techniques.
 It turns out that while the two methods are mathematically equivalent,
 doing it via a loop is much slower.
 In this problem, please measure the time 
\begin_inset Formula $T_{n}$
\end_inset

 required for several different values of 
\begin_inset Formula $n$
\end_inset

.
 Test the hypothesis that 
\begin_inset Formula $T_{n}=Cn^{3}$
\end_inset

 by plotting your measure valued of 
\begin_inset Formula $T_{n}$
\end_inset

 versus 
\begin_inset Formula $n$
\end_inset

 in a log-log-diagram.
 Fit a straight line through the points, and estimate 
\begin_inset Formula $C$
\end_inset

.
 Hand in the graph and the values of C that you estimate for the two methods.
\end_layout

\end_deeper
\begin_layout Enumerate
Repeat the problem in (a), but now compare three different matrix factorization
 algorithms:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
[Q,R] = qr(A)
\family default

\begin_inset Newline newline
\end_inset

This factorization can be blocked.
 It is fast, but no good for low-rank approximation.
\end_layout

\begin_layout Itemize

\family typewriter
[Q,R,J] = qr(A,’vector’)
\family default

\begin_inset Newline newline
\end_inset

Column pivoted QR factorization - intermediately fast, and good for low-rank
 approximation.
\end_layout

\begin_layout Itemize

\family typewriter
[U,D,V] = svd(A)
\family default

\begin_inset Newline newline
\end_inset

Singular value decomposition - slowest, but excellent for low-rank approximation.
\end_layout

\end_deeper
\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Enumerate
For the block method, we notice that the asymptotic order is significantly
 deviated from 3.
 This is most probably thanks to the Strassen's algorithm.
 The constant for blocking method is 
\begin_inset Formula $C_{\text{block}}=4.78\times10^{-9}$
\end_inset

 and 
\begin_inset Formula $C_{\text{serial}}=4.75\times10^{-11}$
\end_inset

 for the serial method.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename p4-a.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Asymptotic performances of blocking and serial method.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
We conjucture that the Pivoted QR algorithm and the SVD algorithm is of
 cubic order and QR is of 2.5 order based on the measurements.
 The constants read 
\begin_inset Formula $C_{\text{Pivoted QR}}=6.64\times10^{-11},C_{\text{SVD}}=5.49\times10^{-10},C_{\text{QR}}=4.65\times10^{-9}$
\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename p4-b.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Asymptotic performances of three matrix factorization methods.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Recall the single pass RSVD shown below.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
ALGORITHM: SINGLE-PASS RANDOMIZED SVD FOR A GENERAL MATRIX
\end_layout

\begin_layout Plain Layout

\series bold
Inputs
\series default
: An 
\begin_inset Formula $m\times n$
\end_inset

 matrix 
\begin_inset Formula $A$
\end_inset

, a target rank 
\begin_inset Formula $k$
\end_inset

, and an over-sampling parameter 
\begin_inset Formula $p$
\end_inset

 (say 
\begin_inset Formula $p=10$
\end_inset

).
\end_layout

\begin_layout Plain Layout

\series bold
Outputs
\series default
: Matrices 
\begin_inset Formula $U$
\end_inset

, 
\begin_inset Formula $V$
\end_inset

, and 
\begin_inset Formula $D$
\end_inset

 in an approximate rank-
\begin_inset Formula $k$
\end_inset

 SVD of 
\begin_inset Formula $A$
\end_inset

.
 (i.e.
 
\begin_inset Formula $U$
\end_inset

 and 
\begin_inset Formula $V$
\end_inset

 are ON and 
\begin_inset Formula $D$
\end_inset

 is diagonal.)
\end_layout

\begin_layout Plain Layout

\series bold
Stage A
\series default
:
\end_layout

\begin_layout Enumerate
Form two Gaussian random matrices 
\begin_inset Formula $G_{c}=randn(n,k+p)$
\end_inset

 and 
\begin_inset Formula $G_{r}=randn(m,k+p)$
\end_inset

.
\end_layout

\begin_layout Enumerate
Form the sample matrices 
\begin_inset Formula $Y_{c}=AG_{c}$
\end_inset

 and 
\begin_inset Formula $Y_{r}=A^{∗}G_{r}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Form ON matrices 
\begin_inset Formula $Q_{c}$
\end_inset

 and 
\begin_inset Formula $Q_{r}$
\end_inset

 consisting of the 
\begin_inset Formula $k$
\end_inset

 dominant left singular vectors of 
\begin_inset Formula $Y_{c}$
\end_inset

 and 
\begin_inset Formula $Y_{r}$
\end_inset

.
\end_layout

\begin_layout Plain Layout

\series bold
Stage B
\series default
:
\end_layout

\begin_layout Enumerate
Let 
\begin_inset Formula $C$
\end_inset

 denote the 
\begin_inset Formula $k\times k$
\end_inset

 least squares solution of the joint system of equations formed by the equations
 
\begin_inset Formula $\left(G_{r}^{∗}Q_{c}\right)C=Y_{r}^{∗}Q_{r}$
\end_inset

 and 
\begin_inset Formula $C\left(Q_{r}^{∗}G_{c}\right)=Q_{c}^{∗}Y_{c}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Decompose the matrix 
\begin_inset Formula $C$
\end_inset

 in a singular value decomposition 
\begin_inset Formula $\left[\widehat{U},D,\widehat{V}\right]=svd\left(C\right)$
\end_inset

.
\end_layout

\begin_layout Enumerate
Form 
\begin_inset Formula $U=Q_{c}\widehat{U}$
\end_inset

 and 
\begin_inset Formula $V=Q_{r}\widehat{V}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Consider the following piece of Matlab code: ...
 This snippet of code emulates how a streaming algorithm would interact
 with 
\begin_inset Formula $A$
\end_inset

 - you read a set of 
\begin_inset Formula $b$
\end_inset

 columns at a time, and use the information in 
\begin_inset Formula $A_{slice}$
\end_inset

 to build 
\begin_inset Formula $Y_{c}$
\end_inset

 piece by piece.
\end_layout

\begin_layout Enumerate
Write code to replace the question marks.
 The result of the new code should be that after the loop completes, the
 matrix Yr has also been computed.
 Note that this line should reference only A_slice, not A itself.
 (This can be solved by a single line of code, but if you use more, then
 that is fine too.)
\end_layout

\begin_layout Enumerate
Currently, the code only works if n is an integer multiple of b.
 Modify the code so that it works for any block size b.
\end_layout

\begin_layout Standard
Hand in the code you write.
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "hw02p5.m"
lstparams "breaklines=true,captionpos=b,frame=tb,language=Matlab,backgroundcolor={\\color{backcolour}},commentstyle={\\color{codegreen}},keywordstyle={\\color{magenta}},numberstyle={\\tiny\\color{codegray}},stringstyle={\\color{codepurple}},basicstyle={\\ttfamily\\footnotesize},breakatwhitespace=false,breaklines=true,keepspaces=true,numbers=left,numbersep=5pt,showspaces=false,showstringspaces=false,showtabs=false,tabsize=2,caption={Completed code on streaming computation}"

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
On the course webpage, download the file 
\family typewriter
hw02p6.m
\family default
.
 This file contains an implementation of the basic RSVD scheme.
 It computes approximate matrix factorizations using the basic RSVD, and
 plots the approximation error versus the minimum error as produced by the
 truncated (full) SVD.
 The error is reported in both the spectral and the Frobenius norms.
\end_layout

\begin_deeper
\begin_layout Standard
For this problem, code up the single pass algorithm described in Figure
 1 and include it in the comparison.
 Hand in a printout of your implementation of the single pass algorithm
 (you do not need to print out the driver code, etc, just the actual subroutine).
 Also hand in the error plots for three different sets of test matrices.
 In the code that you can download, two test cases are already included.
 You are welcome to use these two.
 For the third, come up with some matrix you find interesting yourself!
 It could be dense, sparse, etc.
 Just remember that for any of this to make sense, the singular values of
 the matrix you pick must show at least some degree of decay.
\end_layout

\begin_layout Standard
Note: In step (4) of the algorithm, the matrix 
\begin_inset Formula $C$
\end_inset

 is determined by jointly solving two matrix equations.
 Note that this is a bit complicated to implement.
 For simplicity, simply pick one of the two equations and determine 
\begin_inset Formula $C$
\end_inset

 by solving that one, ignoring the other.
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
We attach the error plots in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:p6-1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:p6-2"

\end_inset

.
 In general, the single pass RSVD method work slightly worse than RSVD methods,
 but still decent.
 When eigenvalues have a slower decay, these methods work far worse than
 the optimal SVD method.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename hw6_diffusion_cubic.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diffusion cubic matrix case.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename hw6_fast_decay.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fast decay matrix case.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:p6-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename hw6_helmholtz.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Helmholtz matrix case.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename hw6_slow_decay.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Slow decay matrix case.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:p6-2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "hw02p6.m"
lstparams "breaklines=true,captionpos=b,frame=tb,language=Matlab,firstline=164,backgroundcolor={\\color{backcolour}},commentstyle={\\color{codegreen}},keywordstyle={\\color{magenta}},numberstyle={\\tiny\\color{codegray}},stringstyle={\\color{codepurple}},basicstyle={\\ttfamily\\footnotesize},breakatwhitespace=false,breaklines=true,keepspaces=true,numbers=left,numbersep=5pt,showspaces=false,showstringspaces=false,showtabs=false,tabsize=2,caption={Single-pass RSVD algorithm}"

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
The purpose of this exercise is to investigate how well certain structured
 random embeddings do at approximating the range of a matrix.
 Given an 
\begin_inset Formula $m\times n$
\end_inset

 matrix 
\begin_inset Formula $A$
\end_inset

, we seek to build a sample from its range of the form 
\begin_inset Formula $Y=A\Omega$
\end_inset

, where 
\begin_inset Formula $\Omega$
\end_inset

 is a random matrix of size 
\begin_inset Formula $n\times l$
\end_inset

.
 We consider three different distributions:
\end_layout

\begin_deeper
\begin_layout Enumerate
A standard Gaussian random matrix.
\end_layout

\begin_layout Enumerate
A subsampled randomized discrete Fourier transform, 
\begin_inset Formula $\Omega=DFS$
\end_inset

, where 
\begin_inset Formula $D$
\end_inset

 is a diagonal matrix whose entries are drawn randomly from 
\begin_inset Formula $\left\{ −1,1\right\} $
\end_inset

, where 
\begin_inset Formula $F$
\end_inset

 is the discrete cosine transform (or DFT, if you prefer), and where 
\begin_inset Formula $S$
\end_inset

 is an 
\begin_inset Formula $n\times l$
\end_inset

 sampling matrix formed by randomly drawing a subset of 
\begin_inset Formula $l$
\end_inset

 columns from the 
\begin_inset Formula $n\times n$
\end_inset

 identity matrix.
 
\end_layout

\begin_layout Enumerate
A sparse random matrix formed by randomly placing 
\begin_inset Formula $\zeta$
\end_inset

 nonzero entries in each row of 
\begin_inset Formula $\Omega$
\end_inset

, where 
\begin_inset Formula $\zeta$
\end_inset

 is a small integer (say 
\begin_inset Formula $\zeta\in\left\{ 2,3,4,...,8\right\} $
\end_inset

).
 Each non-zero entry is drawn from a standard Gaussian distribution.
\end_layout

\begin_layout Standard
Code up these choices, and write a script that evaluates the error 
\begin_inset Formula $e_{l}=\norm{A−P_{Y}A}$
\end_inset

, where 
\begin_inset Formula $P_{Y}$
\end_inset

 is the orthogonal projection onto 
\begin_inset Formula $col(Y)$
\end_inset

, as a function of the number of samples 
\begin_inset Formula $l$
\end_inset

 drawn.
 Hand in some graphs that show how the error 
\begin_inset Formula $e_{l}$
\end_inset

 compares to the theoretically minimal value 
\begin_inset Formula $\sigma_{l+1}$
\end_inset

 for a few different matrices 
\begin_inset Formula $A$
\end_inset

.
 For instance, you can use the three test matrices provided in the routine
 
\family typewriter
hw02p6.m
\family default
.
 However, add at least one additional matrix of your choice.
 Briefly describe the matrices that you use.
\end_layout

\begin_layout Standard

\series bold
Hint 1
\series default
: There is no need to code the SRFT up efficiently.
 I would simply apply the full FFT or the full DFT to create a big sample
 matrix 
\begin_inset Formula $Y_{big}=ADF$
\end_inset

, then draw 
\begin_inset Formula $l$
\end_inset

 columns at random from this matrix to form 
\begin_inset Formula $Y$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Hint 2
\series default
: Note that 
\begin_inset Formula $P_{Y}=QQ^{∗}$
\end_inset

 where 
\begin_inset Formula $Q$
\end_inset

 is the tall thin “Q” factor in a QR factorization of 
\begin_inset Formula $Y$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Background
\series default
: The preprints https://arxiv.org/abs/2104.05877 and https://arxiv.org/abs/2002.0138
7 may be of interest to anyone wanting to learn more about structured random
 embeddings.
 There is no need to study these in order to solve this problem, however!
\end_layout

\begin_layout Standard

\series bold
Solution:
\end_layout

\begin_layout Standard
We attach the error plots in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:p7-1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:p7-2"

\end_inset

.
 The additional test case is inspired from the diffusion equation where
 the test matrix is the power of a numerical twice difference matrix:
\begin_inset Formula 
\[
A_{\text{diffusion}}:=B^{n},B:=\left(\begin{array}{ccccc}
2 & -1\\
-1 & 2 & \ddots\\
 & \ddots & \ddots & \ddots\\
 &  & \ddots & 2 & -1\\
 &  &  & -1 & 2
\end{array}\right).
\]

\end_inset

The smallest few eigenvalues (as well as singular values) are given by
\begin_inset Formula 
\[
\left(1-\cos\left(\frac{k\pi}{m}\right)\right)^{n}\approx\left(\frac{k^{2}\pi^{2}}{2m^{2}}\right)^{n}
\]

\end_inset

for small 
\begin_inset Formula $k$
\end_inset

, where 
\begin_inset Formula $m$
\end_inset

 is the size of the matrix 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
In general, the gaussian distribution works as well as the sparse scheme
 (the third one listed), but the SRFT one seems to underperform in quite
 a few cases.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename hw7_diffusion_cubic.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diffusion cubic matrix case.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename hw7_fast_decay.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fast decay matrix case.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:p7-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename hw7_helmholtz.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Helmholtz matrix case.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename hw7_slow_decay.epsc
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Slow decay matrix case.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:p7-2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "hw02p7.m"
lstparams "breaklines=true,captionpos=b,frame=tb,language=Matlab,lastline=97,backgroundcolor={\\color{backcolour}},commentstyle={\\color{codegreen}},keywordstyle={\\color{magenta}},numberstyle={\\tiny\\color{codegray}},stringstyle={\\color{codepurple}},basicstyle={\\ttfamily\\footnotesize},breakatwhitespace=false,breaklines=true,keepspaces=true,numbers=left,numbersep=5pt,showspaces=false,showstringspaces=false,showtabs=false,tabsize=2,caption={Random embedding algorithm}"

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
